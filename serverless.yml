service: short-linker-serverless
frameworkVersion: '3'

constructs:
  messages-queue:
    type: queue
    worker:
      handler: ./link-delete-handling/messages.handler

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-lift
custom:
  tableName: 'users-table-${sls:stage}'
  tokensTableName: 'refresh-tokens-${sls:stage}'
  shortLinksTableName: 'short-links-table-${sls:stage}'

provider:
  name: aws
  runtime: nodejs18.x
  logs:
    httpApi: true
  httpApi:
    cors: true
    authorizers: 
      customFunc:
        type: request
        functionName: authorizerFunc
        name: myAuthorizer
        payloadVersion: '2.0'
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - ses:SendEmail
            - ses:VerifyEmailIdentity
          Resource:
            - "arn:aws:sts::${aws:accountId}:assumed-role/*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tableName}*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tokensTableName}*"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.shortLinksTableName}*"
            - 'arn:aws:ses:${aws:region}:${aws:accountId}:identity/*'
  environment:
    SECRET_KEY: 'Some secret words'
    ACCESS_KEY_TTL: '1h'
    LINK_LENGTH: 6
    USERS_TABLE: ${self:custom.tableName}
    TOKENS_TABLE: ${self:custom.tokensTableName}
    SHORT_LINKS_TABLE: ${self:custom.shortLinksTableName}
    QUEUE_LINK: 'https://sqs.${aws:region}.amazonaws.com/${aws:accountId}/${self:service}-${sls:stage}-messages-queue'
    REGION: ${aws:region}

functions:
  auth:
    handler: ./auth/auth.handler
    events: 
      - httpApi: 'ANY /auth/{any}'
  short-links:
    handler: ./short-links/app.handler
    events: 
      - httpApi:
          path: /sh-lks/{any}
          method: any
  manage-links:
    handler: ./manage-links/app.handler
    events:
      - httpApi:
          path: /short-linker/{any}
          method: any
          authorizer:
            type: request 
            name: customFunc
  authorizerFunc:
    handler: authorizer.handler
  deleteHandling:
    handler: ./link-delete-handling/app.handler
    events:
      - stream:
          type: dynamodb
          arn: 
            Fn::GetAtt:
              - ShortLinksTable
              - StreamArn
          batchSize: 10
          maximumBatchingWindow: 60
    
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
    RefreshTokens:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tokensTableName}
    ShortLinksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: linkId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: linkId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: 'ALL'
        StreamSpecification:
          StreamViewType: OLD_IMAGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.shortLinksTableName}
        TimeToLiveSpecification:
          AttributeName: timeToLive
          Enabled: true

